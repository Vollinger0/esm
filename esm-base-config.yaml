general:
  debugMode: False # if True, most file system operations will not be executed and processes not started. You probably don't need this unless you're developing this.
  externalizeTemplates: True # if True, will "externalize" the savegame templates, meaning that they will be symlinked back to the hdd when using the ramdisk. This saves aboit 40% of space on the ramdisk!
  useRamdisk: True # if True, use a ramdisk for the savegame. Requires the user to call ramdisk-prepare and ramdisk-setup to work. Will completely solve your server performance issues.

ramdisk:
  drive: "R:" # the drive letter to use for the ramdisk, e.g. "R:"
  size: "2G" # ramdisk size to use, e.g. '5G' or '32G', etc. If you change this, the ramdisk needs to be re-mounted, and the setup needs to run again.
  synchronizeRamToMirrorInterval: 60 # interval in seconds at which to do a ram2hdd sync for the savegame. if interval=0 the sync will be disabled! Recommended to leave at 3600 (1h)

server:
  dedicatedYaml: 'esm-dedicated.yaml'
  savegame: 'EsmDediGame'
  #startMode: 'direct'  # use 'direct' if you want to bypass the launcher, e.g. if you want to run multiple instances of the server on the same machine.
  startMode: 'launcher' # use 'launcher' if you want to start the game the usual way. The launcher itself will then start the dedicated server.
  gfxMode: False # if True, enables the blue graphics overlay of the server, probably not needed when you use EAH or something else to manage the server
  minDiskSpaceForStartup: 500M # if disk space on the drive with the savegame (or ramdisk) is below this, do NOT start the server to avoid savegame corruption. gnu notation
  startUpSleepTime: 20 # min amount of time in seconds to wait for the server to start up when creating a new savegame
  launcher:
    maxStartupTimeout: 15 # max amount of time in seconds to find the dedicated exe after calling the launcher.
  sendExitTimeout: 60 # amount of seconds to wait until we give up stopping the server and throw an error
  sendExitInterval: 5 # how many seconds to wait before retrying to send another 'saveandexit' to the server to stop it

backups:
  amount: 4 # amount of rolling mirror backups to keep
  marker: 'esm_this_is_the_latest_backup' # filename used for the marker that marks as backup as being the latest.
  additionalBackupPaths: 
    # list of full paths to source files or directories to backup additionally. Those will all end up in the folder "Additional" in the backup.
    - 'D:\EGS\Empyrion\esm\esm-base-config.yaml' # our own configuration
    - 'D:\EGS\Empyrion\Content\Mods\EncryptoidModPack' # the whole modpack
  staticBackupPeaZipOptions: "a -tzip -mtp=0 -mm=Deflate64 -mmt=on -mx1 -mfb=32 -mpass=1 -sccUTF-8 -mcu=on -mem=AES256 -bb0 -bse0 -bsp2" #make sure to use the fastest compression options
  minDiskSpaceForStaticBackup: 500M # if disk space on the drive with the backups has less free space than this, do not create a backup. gnu notation.

updates: 
  additional:
    # additional stuff to copy when doing an esm-update action. 
    # If a path is relative, it will be assumed to be relative to the installation path.
    # if dst is not a directory, a directory with that name will be created and used as target for the source.
    # if src is a directory, it will be copied recursively into the target folder.
    # existing files/directories in the target will be overwritten!
    - {src: 'D:\EGS\Empyrion\test.txt', dst: 'esm'}
    #- {src: 'D:\EGS\Empyrion\test.txt', dst: 'content\configuration'}
    #- {src: 'D:\EGS\Empyrion\test.txt', dst: 'D:\temp'}

deletes:
  backupGameLogs: True # backup all game logs
  backupEahLogs: True  # backup all eah logs
  backupEsmLogs: True  # backup all esm logs
  additionalDeletes:
    # add paths to files/directories that shall be deleted additionally to the savegame, like mod data, etc.. This accepts filesystem globbing (wildcards) like *.dat or similar.
    # if a path is relative, it will be assumed to be relative to the installation path.
    - 'test.txt'
    # - 'Content\Mods\EncryptoidModPack\Mods\AdminTetherport\Database'

paths:
  install: 'D:\EGS\Empyrion\'
  osfmount: 'C:\Users\Nutzer\Programme\OSFMount\osfmount.com'
  peazip: 'C:\Program Files\PeaZip\res\bin\7z\7z.exe'
  epmremoteclient: 'D:\EGS\Empyrion\EmpyrionPrime.RemoteClient.Console.exe'
  eah: 'D:\EGS\Empyrion\DedicatedServer\EmpyrionAdminHelper'
  steamcmd: 'D:\EGS\steamcmd.exe'

foldernames:
  saves: 'Saves'
  games: 'Games'
  backup: 'Backup'
  playfields: 'Playfields'
  templates: 'Templates'
  backupmirrors: 'BackupMirrors'
  backupmirrorprefix: 'rollingBackup_'
  dedicatedserver: 'DedicatedServer'
  gamesmirror: 'GamesMirror'
  savegamemirrorpostfix: '_Mirror'
  savegametemplatepostfix: '_Templates'

filenames:
  globaldb: 'global.db'
  buildNumber: 'BuildNumber.txt'
  dedicatedExe: 'EmpyrionDedicated.exe'
  launcherExe: 'EmpyrionLauncher.exe'

communication:
  synceventname: 'Hamster'
  synceventsfile: 'hamster_sync_lines.csv' #should contain a csv file with two columns, each containing the first and second sentence. The first will be used when starting a sync, the secnd when its finished.

robocopy:
  encoding: 'ansi' #depending on the shell used, it may be necessary to change this to ansi, utf-8, cp1252 or something. This will be passed to subprocess.run(...encoding=...)
  options:
    move: "/MOVE /E /np /ns /nc /nfl /ndl /mt /r:10 /w:10 /unicode"
    copy: "/MIR  /np /ns /nc /nfl /ndl /mt /r:10 /w:10 /unicode"
