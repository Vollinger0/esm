general:
  debugMode: False # True|False. if True, most file system operations will not be executed and processes not started. You probably don't need this unless you're developing this.
  externalizeTemplates: True # True|False. if True, will "externalize" the savegame templates, meaning that they will be symlinked back to the hdd when using the ramdisk. This saves aboit 40% of space on the ramdisk!
  useRamdisk: True # True|False. if True, use a ramdisk for the savegame. Requires the user to call ramdisk-prepare and ramdisk-setup to work. Will completely solve your server performance issues.
  bindingPort: 6969 # int. default port to bind application to, just used to make sure only one instance can run with one config at a time.
  multipleInstanceWaitInterval: 10 # int. interval for checking if there is another script running at script start
  multipleInstanceWaitTries: 180 # int. amount of times of checking if there is another script running at script start

ramdisk:
  drive: "R:" # string. the drive letter to use for the ramdisk, e.g. "R:"
  size: "2G" # string. ramdisk size to use, e.g. '5G' or '32G', etc. If you change this, the ramdisk needs to be re-mounted, and the setup needs to run again.
  synchronizeRamToMirrorInterval: 3600 # int. interval in seconds at which to do a ram2hdd sync for the savegame. if interval=0 the sync will be disabled! Recommended to leave at 3600 (1h)

server:
  dedicatedYaml: 'esm-dedicated.yaml' # string. path to dedicated yaml, make sure this is the one defined in EAH if you use that
  #startMode: 'direct'  # use 'direct' if you want to bypass the launcher, e.g. if you want to run multiple instances of the server on the same machine.
  startMode: 'launcher' # 'direct|launcher'. use 'launcher' if you want to start the game the usual way. The launcher itself will then start the dedicated server.
  gfxMode: False # True|False. if True, enables the blue graphics overlay of the server, probably not needed when you use EAH or something else to manage the server
  minDiskSpaceForStartup: '2G' # string. if disk space on the drive with the savegame (or ramdisk) is below this, do NOT start the server to avoid savegame corruption. gnu notation
  startUpSleepTime: 20 # int. min amount of time in seconds to wait for the server to start up when creating a new savegame
  launcherMaxStartupTimeout: 15 # int. max amount of time in seconds to find the dedicated exe after calling the launcher.
  sendExitTimeout: 60 # int. amount of seconds to wait until we give up stopping the server and throw an error
  sendExitInterval: 5 # int. how many seconds to wait before retrying to send another 'saveandexit' to the server to stop it

backups:
  amount: 4 # int. amount of rolling mirror backups to keep
  marker: 'esm_this_is_the_latest_backup' # string. filename used for the marker that marks as backup as being the latest.
  staticBackupPeaZipOptions: "a -tzip -mtp=0 -mm=Deflate64 -mmt=on -mx1 -mfb=32 -mpass=1 -sccUTF-8 -mcu=on -mem=AES256 -bb0 -bse0 -bsp2" #string. make sure to use the fastest compression options
  minDiskSpaceForStaticBackup: '2G' # string. if disk space on the drive with the backups has less free space than this, do not create a backup. gnu notation.
  additionalBackupPaths: # list of full paths to source files or directories to backup additionally. Those will all end up in the folder "Additional" in the backup.
    - 'D:\Servers\Empyrion\Content\Mods\EncryptoidModPack' # the whole modpack
    - 'D:\Servers\Tools\esm\esm-custom-config.yaml' # our own configuration

updates: 
  scenariosource: 'D:\Servers\Scenarios\ProjectA' # source directory with the scenario files that will be copied to the servers scenario folder.
  additional: # additional stuff to copy when calling the esm game-update command
    # If a path is relative, it will be assumed to be relative to the installation path.
    # source path globs (wildcards) are supported
    # if dst does not exist and is not a directory, a directory with that name will be created and used as target for the source.
    # if src is a directory, it will be copied recursively into the target folder.
    # existing files/directories in the target will be overwritten!
    #
    # copy all item icons from the scenario to EAH
    - {src: 'D:\Servers\Scenarios\ProjectA\SharedData\Content\Bundles\ItemIcons\*.*', dst: 'D:\Servers\Empyrion\DedicatedServer\EmpyrionAdminHelper\Items\'}
    # copy custom sqlqueries to the game config
    - {src: 'D:\Servers\Misc\server_rankings\SqlQueries_disabled.txt', dst: 'D:\Servers\Empyrion\Content\Configuration\SqlQueries.txt'}


deletes:
  backupGameLogs: True # True|False. backup all game logs on deleteall command?
  backupEahLogs: True  # True|False. backup all eah logs on deleteall command?
  backupEsmLogs: True  # True|False. backup all esm logs on deleteall command?
  additionalDeletes: # additional paths of stuff to delete when using the "deleteall" command
    # paths to files/directories could point to like mod data, etc.. This accepts filesystem globbing (wildcards) like *.dat or similar.
    # if a path is relative, it will be assumed to be relative to the installation path.
    - 'Content\Mods\EncryptoidModPack\Mods\AdminTetherport\Database'

paths:
  install: 'D:\Servers\Empyrion\' # the games main installation location
  osfmount: 'D:\Servers\Tools\OSFMount\osfmount.com' # path to osfmount executable needed to mount the ram drive
  peazip: 'D:\Servers\Tools\PeaZip\res\bin\7z\7z.exe' # path to peazip used for the static backups
  epmremoteclient: 'D:\Servers\Tools\esm\emprc\EmpyrionPrime.RemoteClient.Console.exe' # path to emprc, used to send commands to the server
  eah: 'D:\Servers\Empyrion\DedicatedServer\EmpyrionAdminHelper' # path to EAH, for backing up its data
  steamcmd: 'D:\Servers\Tools\steamcmd.exe' # path to steamcmd for installs and updates of the game server

foldernames: # names of different folders, you probably do not need to change any of these.
  games: 'Games'
  backup: 'Backup'
  playfields: 'Playfields'
  templates: 'Templates'
  shared: 'Shared'
  backupmirrors: 'BackupMirrors'
  backupmirrorprefix: 'rollingBackup_'
  dedicatedserver: 'DedicatedServer'
  gamesmirror: 'GamesMirror'
  savegamemirrorpostfix: '_Mirror'
  savegametemplatepostfix: '_Templates'
  esmtests: 'esm-tests' # this folder will be used to conduct a few tests on the filesystem below the installation dir

filenames: # names of different files, you probably do not need to change any of these.
  globaldb: 'global.db'
  buildNumber: 'BuildNumber.txt'
  dedicatedExe: 'EmpyrionDedicated.exe'
  launcherExe: 'EmpyrionLauncher.exe'

communication:
  announceSyncEvents: True # True|False. if true, sync events (syncStart, syncEnd) will be announced in the chat
  announceSyncProbability: 0.3 # float. probability factor that a sync will be announced at all, this is to avoid it being too spammy. something between 0.0 and 1.0
  synceventname: '[0fa336]Hamster-News' # string. the name to be used when announcing a sync on the server, may contain bb-code for colors and such
  synceventmessageprefix: '[aaaaaa]' # string. this string will be prepended to all sync event messages, you can use this to set a bb-color code
  synceventsfile: 'hamster_sync_lines.csv' # string. should contain the path to a csv file with two columns, each containing the first and second sentence. The first will be used when starting a sync, the second when its finished.

robocopy:
  encoding: 'ansi' #depending on the shell used, it may be necessary to change this to ansi, utf-8, cp1252 or something. This will be passed to subprocess.run(...encoding=...)
  options:
    move: "/MOVE /E /np /ns /nc /nfl /ndl /mt /r:10 /w:10 /unicode"
    copy: "/MIR  /np /ns /nc /nfl /ndl /mt /r:10 /w:10 /unicode"
